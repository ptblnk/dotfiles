### Startup
# Blue light
exec_always wlsunset
#

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term alacritty
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
# Recommends: rofi-wayland
set $rofi_cmd rofi \
        -terminal '$term'
# Shows a combined list of the applications with desktop files and
# executables from PATH.
# TODO: add window with the next release of rofi-wayland
set $menu $rofi_cmd -show combi -combi-modes drun#run -modes combi
#
### Output configuration
#
# Wallpaper
output * bg /home/netmoss/Pictures/Wallpapers/hg7bwrnnly981.png fill
#
# Display configuration:
#
output DP-4 resolution 3440x1440@144Hz position 3440,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Timeout configuration:
#
exec swayidle -w \
         timeout 300 'gtklock -d' \
         timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
         before-sleep 'gtklock -d'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Touchpad configuration
#
input "type:touchpad" {
    dwt enabled
    tap enabled
    natural_scroll enabled
    middle_emulation enabled
     click_method clickfinger
    }
#
# Touchpad gestures
bindgesture swipe:right workspace prev
bindgesture swipe:left workspace next
#
# Mouse configuration
#
input "type:pointer" {
    natural_scroll false
    accel_profile "flat"
    pointer_accel 0
   }
#
# Keyboard configuration
input "type:keyboard" {
    xkb_layout us
    xkb_options caps:escape
   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+q kill

    # Start your launcher
    bindsym $mod+d exec $menu
	
    # Start browser
    bindsym $mod+w exec firefox 

    # Start file explorer
    bindsym $mod+n exec thunar

    # Lock screen
    bindsym $mod+Escape exec gtklock

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    #bindsym $mod+s layout stacking
    bindsym $mod+t layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

### Appearance
#
# Bar configuration:
  #default_border none
# Window colours
  client.focused               #21262d     #161b22    #ecf2f8    #80808080      #21262d
  client.unfocused             #161b22     #161b22    #ecf2f8    #80808080      #80808080
  client.focused_inactive      #161b22     #161b22    #ecf2f8    #80808080      #80808080
# Fonts
  font pango:JetBrainsMono Nerd Font 10

# apply mark for Xwayland and wayland native browser windows
for_window [class="Chromium-browser"] mark Browser
for_window [class="Brave-browser"] mark Browser
for_window [class="firefox"]  mark Browser
for_window [app_id="Chromium-browser"] mark Browser
for_window [app_id="brave-browser"] mark Browser
for_window [app_id="firefox"] mark Browser

# inhibit scrensaver for fullscreen browser windows
for_window [con_mark="Browser"] {
    inhibit_idle fullscreen
}

# firefox wayland screensharing indicator
for_window [app_id="firefox" title="Firefox â€” Sharing Indicator"] {
    floating enable
}
# Display PulseAudio volume control application (both GTK and Qt varieties)
# as a floating window.

for_window [app_id="pavucontrol"] {
    floating enable
    move position center
}

for_window [app_id="pavucontrol-qt"] {
    floating enable
    move position center
}
for_window [app_id="lxqt-policykit-agent"] {
    floating enable
    move position center
}
# Key bindings for brightness control using `brightnessctl`.
# Displays a notification with the current value if /usr/bin/notify-send is available
#
# Brightness increase/decrease step can be customized by setting the `$brightness_step`
# variable to a numeric value before including the file.
#
# Requires:     brightnessctl >= 0.5.1-11
# Recommends:   libnotify

set $brightness_notification_cmd  command -v notify-send >/dev/null && \
        VALUE=$(brightnessctl --percentage get) && \
        notify-send -e -h string:x-canonical-private-synchronous:brightness \
            -h "int:value:$VALUE" -t 800 "Brightness: ${VALUE}%"

bindsym XF86MonBrightnessDown exec \
        'STEP="$brightness_step" && brightnessctl -q set ${STEP:-5}%- && $brightness_notification_cmd'
bindsym XF86MonBrightnessUp exec \
        'STEP="$brightness_step" && brightnessctl -q set +${STEP:-5}% && $brightness_notification_cmd'
# Key bindings for media player control via MPRIS D-Bus interface
#
# Requires:     playerctl

# Allow Play and Stop bindings even if the screen is locked
bindsym --locked {
    XF86AudioPlay       exec playerctl play-pause
    XF86AudioStop       exec playerctl stop
}

bindsym {
    XF86AudioForward    exec playerctl position +10
    XF86AudioNext       exec playerctl next
    XF86AudioPause      exec playerctl pause
    XF86AudioPrev       exec playerctl previous
    XF86AudioRewind     exec playerctl position -10
}
# Key bindings for taking screenshots
#
# The image files will be written to XDG_SCREENSHOTS_DIR if this is set
# or defined in user-dirs.dir, or to a fallback location XDG_PICTURES_DIR.
#
# Copy the file to ~/.config/sway/config.d/60-bindings-screenshot.conf (or to
# your $XDG_CONFIG_HOME location if set differently) to be able to overwrite
# existing shortcuts.
# Check 'man grimshot' for additional commands that you may find useful.
#
# Requires:     grimshot

bindsym {
    # Capture the currently active output
    Print       exec grimshot save output $(xdg-user-dir PICTURES)/$(date +%y-%m-%d_%H-%M-%S.png)
    # Capture the currently active window
    Alt+Print   exec grimshot save active $(xdg-user-dir PICTURES)/$(date +%y-%m-%d_%H-%M-%S.png)
    # Select and capture a custom rectangular area
    Ctrl+Print  exec grimshot save area $(xdg-user-dir PICTURES)/$(date +%y-%m-%d_%H-%M-%S.png)
}
# Key bindings to control pipewire or pulseaudio volume with pactl.
# Displays a notification with the current state if /usr/bin/notify-send is available

# Requires:     pulseaudio-utils
# Recommends:   libnotify

set $volume_step 5
set $volume_limit 100

# Allow volume controls even if the screen is locked
bindsym --locked {
    XF86AudioRaiseVolume exec \
	pactl set-sink-volume @DEFAULT_SINK@ +5%
    XF86AudioLowerVolume exec \
        pactl set-sink-volume @DEFAULT_SINK@ -5%
    XF86AudioMute    exec pactl set-sink-mute @DEFAULT_SINK@ toggle
    XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle
}
# A special mode for passing any keybindings to the focused application

mode "passthrough" {
    bindsym $mod+Pause mode default
}
bindsym $mod+Pause mode "passthrough"
# Status Bar: waybar
#
# Read `man 5 sway-bar` for more information about this section.
# Read `man 5 waybar` for more information about the waybar instance style and layout configuration
#
# Requires: waybar

bar {
    swaybar_command waybar
}
# Idle and lock configuration
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 60 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
# The timeouts can be customized via `$lock_timeout` and `$screen_timeout`
# variables. For a predictable behavior, keep the `$screen_timeout` value
# lesser than the `$lock_timeout`.
#
# Requires: swayidle
# Requires: gtklock
# Requires: /usr/bin/pkill, /usr/bin/pgrep

exec LT="$lock_timeout" ST="$screen_timeout" LT=${LT:-300} ST=${ST:-60} && \
    swayidle -w \
        timeout $LT 'gtklock -d' \
        timeout $((LT + ST)) 'swaymsg "output * power off"' \
                      resume 'swaymsg "output * power on"'  \
        timeout $ST 'pgrep -xu "$USER" gtklock >/dev/null && swaymsg "output * power off"' \
             resume 'pgrep -xu "$USER" gtklock >/dev/null && swaymsg "output * power on"'  \
        before-sleep 'gtklock -d' \
        lock 'gtklock -d' \
        unlock 'pkill -xu "$USER" -SIGUSR1 gtklock'

# Create or update XDG user dir configuration
#
# See also:
#  - /etc/xdg/autostart/xdg-user-dirs.desktop
#  - https://github.com/systemd/systemd/issues/18791
#
# Recommends: xdg-user-dirs

exec /usr/bin/xdg-user-dirs-update

## Environmental variables for Nvidia GPUs
# exec export WLR_RENDERER=vulkan
# exec export WLR_NO_HARDWARE_CURSORS=1
# exec export XWAYLAND_NO_GLAMOR=1
# exec export GBM_BACKEND=nvidia_drm
# exec export __GLX_VENDOR_LIBRARY_NAME=nvidia

